/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, REVERSE, LBRAKET, RBRAKET, COMMA, IFS, PREFIX, ELSE;
terminal IDENT;
terminal String    STRING_LITERAL;        // our scanner provides numbers as integers

/*  Non terminals */
non terminal            program;
non terminal            expr_list;
non terminal            item;
non terminal            func_call;
non terminal            func;
// non terminal            func_args;
non terminal            expr;      // used to store evaluated subexpressions
non terminal            args;

non terminal            expr_temp;
non terminal            expr_temp2;
non terminal            expr_temp3;
non terminal            func_params;
non terminal            func_params_2;
non terminal            func_args;
non terminal            func_args_2;


/**
 *  Precedence Declarations
 */
precedence left PLUS;
precedence left COMMA;
precedence left UMINUS;

start with program;

/**
 *  The Grammar Rules
 */

program ::= program expr_list
            | expr_list
;
expr_list ::= IDENT:fName LPAREN IDENT:param1 func_params_2:paramN                            RPAREN LBRAKET expr:e RBRAKET {: System.out.println("public static String "+fName+"("+param1+paramN+"){return "+e+";}");:}
            | IDENT:fName LPAREN                                                              RPAREN LBRAKET expr:e RBRAKET {: System.out.println("public static String "+fName+"(){return "+e+";}");:}
            | IDENT:fName LPAREN STRING_LITERAL:arg1 func_args_2:argN                         RPAREN                        {: System.out.println(fName+"("+arg1+argN+")");:}
            | IDENT:fName LPAREN IDENT:arg1 LPAREN func_args:argI RPAREN func_args_2:argN     RPAREN                        {: System.out.println(fName+"("+arg1+"("+argI+")"+argN+")"); :}
            | IDENT:fName LPAREN                                                              RPAREN                        {: System.out.println(fName+"()");:}
;
func_params ::= IDENT:id func_params_2:next {: RESULT = ""+id + next;:}
            |                               {: RESULT = ""; :}
;
func_params_2 ::= COMMA func_params:next {: RESULT = ", "+next;:}
            |                            {: RESULT = ""; :}
;
func_args ::= IDENT:id LPAREN func_args:inside RPAREN func_args_2:next {: RESULT = id+"("+inside+")"+next;:}
            | STRING_LITERAL:str func_args_2:next {: RESULT = str+next; :}
            |                                      {: RESULT = ""; :} 
;
func_args_2 ::= COMMA func_args:next {: RESULT = ", "+next;:}
            |                        {: RESULT = ""; :}
;
expr      ::= expr:e1 PLUS expr:e2	              {: RESULT = e1+"+"+e2;           :}
            | IDENT:a                             {: RESULT = ""+a; :}
            | STRING_LITERAL:s                    {: RESULT = "\""+s+"\""; :}
;
