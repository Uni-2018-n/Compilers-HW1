/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, REVERSE, LBRAKET, RBRAKET, COMMA, IFS, PREFIX, ELSE;
terminal IDENT;
terminal String    STRING_LITERAL;        // our scanner provides numbers as integers

/*  Non terminals */
non terminal            program;
non terminal            expr_list;
non terminal            expr_list2;
non terminal            item;
non terminal            item_standalone;
non terminal            expr;      // used to store evaluated subexpressions

non terminal            expr_temp2;
non terminal            expr_temp3;
non terminal            expr_temp4;
non terminal            expr_standalone;
non terminal            expr_temp3_standalone;
non terminal            func_params;
non terminal            func_params_2;
non terminal            func_args;
non terminal            func_args_2;
non terminal            func_args3;
non terminal            func_args_4;
non terminal            program1;
non terminal            program2;


/**
 *  Precedence Declarations
 */
precedence left PLUS, RBRAKET;
precedence left COMMA;

start with program;

/**
 *  The Grammar Rules
 */
program  ::= program1:p1 program2:p2          {: System.out.println("public class Main{ public static void main(String[] args) {"+p2+"}"+p1+"}"); :}
            | program1:p1                     {: System.out.println("public class Main{"+"public static void main(String[] args) {}"+p1+"}"); :}
            | program2:p2                     {: System.out.println("public class Main{ public static void main(String[] args) {"+p2+"}"+"}"); :}
;
program1 ::= program1:p expr_list:e     {: RESULT = ""+p+e+""; :}
            | expr_list:e               {: RESULT = e+""; :}
;
program2  ::=  program2:p1 expr_standalone:p2  {: RESULT = p1+"System.out.println("+p2+");"; :}
            | expr_standalone:e               {: RESULT = "System.out.println("+e+");"; :}            
;
expr_standalone ::= expr_standalone:es1 PLUS expr_standalone:es2     {: RESULT = es1+"+"+es2; :}
        | item_standalone:ite                                        {: RESULT = ite; :}
;

expr_list ::= IDENT:fName LPAREN IDENT:param1 func_params_2:paramN                            RPAREN LBRAKET expr_temp2:e RBRAKET {: RESULT = "public static String "+fName+"(String "+param1+paramN+"){ return "+e+";}"; :}
            | IDENT:fName LPAREN IDENT:param1 func_params_2:paramN                            RPAREN LBRAKET IFS expr:e RBRAKET   {: RESULT = "public static String "+fName+"(String "+param1+paramN+"){ return "+e+";}"; :}
            | IDENT:fName LPAREN                                                              RPAREN LBRAKET expr_temp2:e RBRAKET {: RESULT = "public static String "+fName+"(){ return "+e+";}"; :}
            | IDENT:fName LPAREN                                                              RPAREN LBRAKET IFS expr:e RBRAKET   {: RESULT = "public static String "+fName+"(){ return "+e+";}"; :}
;            
expr_list2::= IDENT:fName LPAREN STRING_LITERAL:arg1 func_args_2:argN                         RPAREN                        {: RESULT = fName+"("+arg1+argN+")"; :}
            | IDENT:fName LPAREN IDENT:arg1 LPAREN  RPAREN func_args_2:argN                   RPAREN                        {: RESULT = fName+"("+arg1+"()"+argN+")"; :}
            // | IDENT:fName LPAREN IDENT:arg1 func_args_2:argN                   RPAREN                        {: RESULT = fName+"("+arg1+argN+")"; :}
            | IDENT:fName LPAREN IDENT:arg1 LPAREN func_args:argI RPAREN func_args_2:argN     RPAREN                        {: RESULT = fName+"("+arg1+"("+argI+")"+argN+")"; :}
            | IDENT:fName LPAREN IFS expr:arg1 func_args_2:argN                               RPAREN                        {: RESULT = fName+"("+arg1+argN+")"; :}
            | IDENT:fName LPAREN                                                              RPAREN                        {: RESULT = fName+"()"; :}
            | IDENT:fName LPAREN REVERSE STRING_LITERAL:arg1 func_args_2:argN                         RPAREN                        {: RESULT = fName+"(new StringBuilder("+arg1+").reverse().toString()"+argN+")"; :}
            | IDENT:fName LPAREN REVERSE IDENT:arg1 LPAREN  RPAREN func_args_2:argN                   RPAREN                        {: RESULT = fName+"(new StringBuilder("+arg1+"()).reverse().toString()"+argN+")"; :}
            | IDENT:fName LPAREN REVERSE IDENT:arg1 func_args_2:argN                   RPAREN                        {: RESULT = fName+"(new StringBuilder("+arg1+").reverse().toString()"+argN+")"; :}
            | IDENT:fName LPAREN REVERSE IDENT:arg1 LPAREN func_args:argI RPAREN func_args_2:argN     RPAREN                        {: RESULT = fName+"(new StringBuilder("+arg1+"("+argI+").reverse().toString()"+argN+")"; :}
            | IDENT:fName LPAREN REVERSE IFS expr:arg1 func_args_2:argN                               RPAREN                        {: RESULT = fName+"(new StringBuilder("+arg1+").reverse().toString()"+argN+")"; :}
;

item_standalone ::= STRING_LITERAL:s                       {: RESULT = s; :}
            | IDENT:id                                     {: RESULT = id; :}
            | REVERSE STRING_LITERAL:s                     {: RESULT = "new StringBuilder("+s+").reverse().toString()"; :}
            | REVERSE IDENT:id                             {: RESULT = "new StringBuilder("+id+").reverse().toString()"; :}
            | REVERSE IFS expr:id                          {: RESULT = "new StringBuilder("+id+").reverse().toString()"; :}
            | IFS expr:id                                  {: RESULT = id; :}
            | expr_list2:e                                 {: RESULT = e; :}
            | REVERSE expr_list2:e                         {: RESULT = "new StringBuilder("+e+").reverse().toString()"; :}
;
func_params ::= IDENT:id func_params_2:next {: RESULT = ""+id + next; :}
            |                               {: RESULT = ""; :}
;
func_params_2 ::= COMMA func_params:next {: RESULT = ", String "+next; :}
            |                            {: RESULT = ""; :}
;
func_args ::= item:ite func_args_2:next  {: RESULT = ""+ite+next; :}
;
func_args_2 ::= COMMA func_args:next    {: RESULT = ", "+next; :}
            | PLUS func_args:next       {: RESULT = "+"+next; :}
            |                           {: RESULT = ""; :}
;
expr      ::= LPAREN expr_temp2:i1 PREFIX expr_temp2:i2 RPAREN expr_temp2:e1 ELSE expr_temp2:e2     {: RESULT = "((("+i2+").startsWith("+i1+"))?"+e1+":"+e2+")"; :}
;
expr_temp2 ::= expr_temp2:e1 PLUS expr_temp2:e2	    {: RESULT = e1+"+"+e2; :}
            | item:i                                {: RESULT = ""+i; :}
;
item ::= STRING_LITERAL:s                       {: RESULT = s; :}
        | IDENT:id                              {: RESULT = id; :}
        | IDENT:id LPAREN func_args:a RPAREN    {: RESULT = id+"("+a+")"; :}
        | IDENT:id LPAREN RPAREN                {: RESULT = id+"()"; :}
        | REVERSE STRING_LITERAL:s              {: RESULT = "new StringBuilder("+s+").reverse().toString()"; :}
        | REVERSE IDENT:id                      {: RESULT = "new StringBuilder("+id+").reverse().toString()"; :}
        | REVERSE IFS expr:id                   {: RESULT = "new StringBuilder("+id+").reverse().toString()"; :}
        | IFS expr:id                           {: RESULT = id; :}
;
