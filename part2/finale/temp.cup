/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, REVERSE, LBRAKET, RBRAKET, COMMA, IFS, PREFIX, ELSE;
terminal IDENT;
terminal String    STRING_LITERAL;        // our scanner provides numbers as integers

/*  Non terminals */
non terminal            program;
non terminal            expr_list;
non terminal            item;
non terminal            func_call;
non terminal            func;
non terminal            func_args;
non terminal            expr;      // used to store evaluated subexpressions
non terminal            args;

non terminal            expr_temp;
non terminal            expr_temp2;
non terminal            expr_temp3;

/**
 *  Precedence Declarations
 */
precedence left PLUS, MINUS, REVERSE;
precedence left TIMES;
precedence left UMINUS;

start with program;

/**
 *  The Grammar Rules
 */

program ::= program expr_list
            | expr_list
;
expr_list ::= IDENT:id LPAREN expr_temp    {: System.out.println("public static String "+id+"("+a+")"+"{return "+e1+";}");:}
            // | func_call
;
// expr_temp ::= RPAREN LBRAKET expr:e1 RBRAKET
//             | STRING_LITERAL 
//             | func_args RPAREN

expr_temp ::= RPAREN expr_temp2 //(){ / ()
            | IDENT LPAREN expr_temp3 RPAREN
            | STRING_LITERAL expr_temp3 RPAREN
;
expr_temp2 ::= LBRAKET expr RBRAKET//){
            |          //)
;
expr_temp3 ::= IDENT LPAREN expr_temp3 RPAREN expr_temp3
            | STRING_LITERAL expr_temp3 
            | COMMA expr_temp3
            | 
;


// args ::= args:e COMMA IDENT:id                                                      {: RESULT = e+", String "+id; :}
//         | IDENT:id                                                                  {: RESULT = "String "+id;       :}
//         |                                                                           {: RESULT = ""; :}
// ;

expr      ::= expr:e1 PLUS expr:e2	      {: RESULT = e1+"+"+e2;           :}
            | IDENT:a                             {: RESULT = ""+a; :}
            | STRING_LITERAL:s                    {: RESULT = "\""+s+"\""; :}
;

// item        ::= IDENT:a {: RESULT = a; :}
//             |   STRING_LITERAL:s {: RESULT = s; :}

// ;


// func_call   ::= func:a                             {: RESULT = a; :}
// ;
// func        ::= IDENT:a LPAREN func_args:fa RPAREN {: RESULT = a+"("+fa+")"; :}
// ;
// func_args   ::= IDENT LPAREN func_args:fa RPAREN                {: RESULT = ""+a+fa; :}
//             |   STRING_LITERAL:s func_args:fa      {: RESULT = s + fa; :}
//             |   COMMA func_args:fa                 {: RESULT = ", "+fa; :}
//             |                                      {: RESULT = ""; :}
// ;
